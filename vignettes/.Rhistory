s2
xl
cn
s1
data1
str(data1)
str(data1[1, ])
str(s1[1, ])
str(s1)
s1[[1]]
data1[[1]]
data1[1, ] %>% str()
data1[1, ] %>% typeof
data1[1, ] %>% class
s1[[1]] %>% typeof
s1[[1]] %>% class
data1
data[1, ]
data1[1,]
rpois
rpois(5, 5)
rpois(5, 5) %>% class
rpois(5, 5) %>% typeof
mat
colSums(mat)
mat / colSums(mat)
mat / colSums(mat) * 1000000
mat / colSums(mat) * 10000
mat / colSums(mat) * 1000
mat / colSums(mat) * 100000
mat / colSums(mat) * 10000000
mat / colSums(mat) * 100000
s2
str(s1, 1)
s1
s1
j=1
r1
r2
d
r1
r1 - r2
r1
r2
mat
sce
counts(sce)
x <- counts(sce)
subset.row = NULL
subset.col = NULL
diff
diff()
hwidth
ind
hwidth
band
In
Snw
dim(Snw)
In
In <- diag(rep(1, n))
In
Snw
y <- In[, 1]
Snw[, 1] <- ksmooth(ind, y, kernel = 'normal' , bandwidth = hwidth, x.points = ind)$y
Snw
kmooth
ksmooth
?ksmooth
     with(cars, {
         plot(speed, dist)
         lines(ksmooth(speed, dist, "normal", bandwidth = 2), col = 2)
         lines(ksmooth(speed, dist, "normal", bandwidth = 5), col = 3)
     })

plot(Snw[, 1])
x
ind
Snw
plot(Snw[, 2])
plot(Snw[, 3])
Idt[, 2]
Idt[, 3]
Idt[, 10]
ksmooth
plot(Snw[, 1])
plot(Snw[, 5])
plot(Snw[, 100])
plot(Snw[, 50])
Snw
Snw
Snw
Snw
Snw
Snw
Snw
Snw[, 1]
plot(Snw[, 1])
plot(Snw[, 50])
Snw
plot(Snw[, 1])
plot(Snw[, 2])
plot(Snw[, 3])
plot(Snw[, 4])
plot(Snw[, 5])
plot(Snw[, 6])
Snw[, 1]
Snw[, 2]
Snw[, 3]
Snw[, 4]
Snw[, 10]
Snw[, 100]
Snw[, 100]
Snw[, 1]
Snw
?ksmooth
mapplt
?mapply
ind
Idt
ksmooth
?ksmooth
Snw
str(Snw)
rm(Snw)
Snw
Snw
Snw
Snw
Snw
Snw <- apply(Idt, 2, function(y) {
        ksmooth(ind, y, 
                kernel = 'normal', bandwidth = hwidth,
                x.points = ind)$y
    })
Snw
idt
Idt
plot(Snw[, 1])
Snw[1, ]
plot(Snw[1, ])
plot(Snw[2, ])
plot(Snw[50, ])
plot(Snw[, 50])
plot(Snw[, 100])
plot(diff)
plot(sort(diff))
cn
i=10
j
diff
plot(diff)
plot(sort(diff))
df_df
diff
length(s1)
j
band
quantile
sigma
sigma
s1
s2
 s1
sigma
sigma
band
n
5/ 100
sigma
quantile(sigma, 0)
quantile(sigma, -1)
ind
adjust_variance = TRUE
sigma
sigma
r1
r2
sigma
sigma <- sigma[1]
ts
sign
ts
sigma
ts
str(ts)
ts
ts[[1]]
names(ts)
ts[1]
ts[2]
ts[3]
ts$ts
ts
ts$region_1
ts
str(ts, 2)
ts[1, ]
ts[2, ]
ts
ts$ts
ts$region_1
sigma
sign
ts
plot(ts)
plot(ts)
plot(ts)
plot(ts)
diag(Snw)
sum(diag(Snw))
n
plot(Snw[, 1])
plot(Snw[, 1])
plot(Snw[, 5])
2 * sum(diag(Snw)) - sum(diag(Snw %*% t(Snw)))
s1
ts
eigen(Amax)$values
eigenvalue
Amax
ts
ts
ts_kn
ts_kn
ts_l
tstat
tsign
tmean
ts_l
regions
tmp
tmp
regions
tmp
ts_df
i
ts_df
cn
ts_df
plot(ts_df[[1]]$Tstat)
hist(ts_df[[1]]$Tstat)
hist(ts_df[[1]]$Tstat)
hist(ts_df[[1]]$Tstat, breaks = 20)
hist(ts_df[[1]]$Tstat, breaks = 30)
hist(ts_df[[1]]$Tstat, breaks = 10)
dev.off()
dev.off()
dev.off()
CairoX11()
Cairo::CairoX11()
install.packages('Cairo')
Cairo::CairoX11()
X11()
x11()
capabilities()
x11()
plot(1,1)
plot(2,1)
capabilities()
hist(ts_df[[1]]$Tstat, breaks = 10)
load_all()
ts_df
cn
gn
cn
gn
gnp
cn
gnp
gn
cn
colnames(xc)
ts_df
cn
gnp
xl
groups_xc
ts_df
gnp
load_all()
out
metadata(out)
metadata(out) %>% str(2)
distil
distill
?distill
data1
str(data1)
data1
head(data1)
data1[1:5, 1:5]
data4[1:5, 1:5]
data1
nrow(data1)
ncol(data1)
tmp[[1]]
tmp
tmp[1]
tmp
rbind
length(data1)
dr
data1
data[1, ]
data1[1, ]
data1[1, ] %>% as.vector()
data1
tmp
df
s <- 'Sample'
dr
dr <- tmp
s
df
df
tmp
tmp
tmp
head(tmp)
d4
rd
colData(sce)
cd
cd$group
paste0(cd$group, '..')
paste0(cd$group, '..', collapse = '..')
d1
d4
d1
dm
load_all()
dm
cd
x
regions
groups
xc
groups_xc
cn
gn
gnp
ts_names
gn
gnp
cd$group
gn
gnp
gnp
gn
gnp
gn
as.character(gn)
gnp
groups_xc
groups_xc
gnp
ts_names
xl
xl[[1]]
xl[[1]] %>% str(2)
cn
ncol(cn)
i=1
s1
s2
traceback()
r1
r2
s1
s1[[1]]
s2[[2]]
sigma
BPPARAM
r1 <- s1[[1]]
r2 <- s2[[1]]
sigma
sd <- sigma[1]
ts_kn
list(Tstat = ts_kn, Tsign = sign, Tmean = ts_mean)
sigma
as.list(sigma)
load_all()
stat
plot(dm[, 1])
plot(dm[, 2])
plot(1,1)
stat
stat
stat
ts_l
sigma
dm
data = dm
band = 5
quantile = 0.8
sigma
hold_sigma <- sigma
sigma
sigma
hold_sigma
sigma
sigma
Xg
dim(data)
data
data = dm
dm
data = data4 - data1
data
Xg
sigma
hold_sigma
sigma
x <- dm
x
sigma
sigma_l
sigma
stat_ct
hold_sigma
sigma
sigma_l
Xg
Xg
sigma
Xg
Xg
sigma
Xg
CHQBC_1_adjB
sigma
sigma_l
sigma
Xg
CHQBC_1_adjB
Ts_yvec
Tstat
tstat
r1
r2
stat
stat_ct
Amax
eigenvalue
ts_kn
hold_sigma
stat
stat_ct
ts_kn
ts_mean
ts_mean
diff_adj_ks
ts_mean
ts_mean
ts_knk
ts_kn
dof
load_all()
stat
stat_ct
load_all()
stat
load_all()
stat
load_all()
stat
stat
stat_ct
stat_ct
stat
q()
setwd('..')
load_all()
load_all()
load_all()
library(SummarizedExperiment)
load_all()
use_package('SummarizedExperiment')
load_all()
load_all()
out
out
metadata(out)
stat
stat_ct
plot(rpois(1000, 10))
hist(rpois(1000, 10))
hist(rpois(1000, 2))
hist(rpois(1000, 5))
hist(rpois(1000, 10))
library(iSEE)
sessionInfo()
iSEE(sce)
?iSEE
    library(scRNAseq)
     data(allen)
     class(allen)
     
     # Example data ----
     
     library(scater)
     sce <- as(allen, "SingleCellExperiment")
     counts(sce) <- assay(sce, "tophat_counts")
     sce <- normalize(sce)
     
     sce <- runPCA(sce, ncomponents=4)
     sce <- runTSNE(sce)
     rowData(sce)$ave_count <- rowMeans(counts(sce))
     rowData(sce)$n_cells <- rowSums(counts(sce)>0)
     sce
     
     # launch the app itself ----
     
     app <- iSEE(sce)
     if (interactive()) {
       shiny::runApp(app, port=1234)
     }
q()
setwd('..')
load_all()
q()
